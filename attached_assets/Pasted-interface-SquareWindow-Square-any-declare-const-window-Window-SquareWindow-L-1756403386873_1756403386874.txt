interface SquareWindow {
  Square?: any;
}

declare const window: Window & SquareWindow;

// Load Square Web Payments SDK
function loadSquareScript(): Promise<void> {
  return new Promise((resolve, reject) => {
    if (window.Square) {
      resolve();
      return;
    }

    const script = document.createElement("script");
    script.src = "https://web.squarecdn.com/v1/square.js";
    script.onload = () => resolve();
    script.onerror = () => reject(new Error("Failed to load Square SDK"));
    document.head.appendChild(script);
  });
}

export async function initializeSquare() {
  // Always use mock payments in development environment
  if (import.meta.env.DEV) {
    console.log("Development mode detected - using mock Square payments");
    return createMockSquarePayments();
  }

  try {
    // Add timeout to prevent hanging
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Square SDK load timeout")), 5000);
    });

    await Promise.race([loadSquareScript(), timeoutPromise]);

    if (!window.Square) {
      throw new Error("Square SDK failed to initialize");
    }

    const payments = window.Square.payments(
      import.meta.env.VITE_SQUARE_APPLICATION_ID ||
        "sandbox-sq0idb-your-app-id",
      import.meta.env.VITE_SQUARE_LOCATION_ID || "sandbox-location",
    );

    return payments;
  } catch (error) {
    console.log("Square SDK failed, using mock payments:", error instanceof Error ? error.message : String(error));
    return createMockSquarePayments();
  }
}

function createMockSquarePayments() {
  return {
    card: async () => {
      let isAttached = false;
      let container: Element | null = null;
      let mockElement: Element | null = null;

      return {
        attach: async (selector: string) => {
          console.log("Mock Square: Attempting to attach to", selector);

          // Find the container
          container = document.querySelector(selector);
          if (!container) {
            console.error("Mock Square: Container not found", selector);
            throw new Error(`Container not found: ${selector}`);
          }

          if (isAttached) {
            console.log("Mock Square: Already attached");
            return;
          }

          try {
            // Clear any existing content safely
            container.innerHTML = "";

            // Create mock payment form elements
            const formWrapper = document.createElement("div");
            formWrapper.className = "square-mock-form";
            formWrapper.style.cssText = `
              padding: 16px;
              background: white;
              border-radius: 8px;
              min-height: 160px;
            `;

            // Card number field
            const cardNumberField = document.createElement("div");
            cardNumberField.style.cssText = `
              margin-bottom: 12px;
            `;
            cardNumberField.innerHTML = `
              <label style="display: block; font-size: 12px; color: #666; margin-bottom: 4px;">Card Number</label>
              <input type="text" placeholder="1234 5678 9012 3456" 
                style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" 
                maxlength="19">
            `;

            // Expiry and CVV row
            const expiryRow = document.createElement("div");
            expiryRow.style.cssText = `
              display: flex; 
              gap: 12px; 
              margin-bottom: 12px;
            `;

            const expiryField = document.createElement("div");
            expiryField.style.cssText = `flex: 1;`;
            expiryField.innerHTML = `
              <label style="display: block; font-size: 12px; color: #666; margin-bottom: 4px;">Expiry</label>
              <input type="text" placeholder="MM/YY" 
                style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" 
                maxlength="5">
            `;

            const cvvField = document.createElement("div");
            cvvField.style.cssText = `flex: 1;`;
            cvvField.innerHTML = `
              <label style="display: block; font-size: 12px; color: #666; margin-bottom: 4px;">CVV</label>
              <input type="text" placeholder="123" 
                style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" 
                maxlength="4">
            `;

            expiryRow.appendChild(expiryField);
            expiryRow.appendChild(cvvField);

            // Postal code field
            const postalField = document.createElement("div");
            postalField.innerHTML = `
              <label style="display: block; font-size: 12px; color: #666; margin-bottom: 4px;">Postal Code</label>
              <input type="text" placeholder="12345" 
                style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px;" 
                maxlength="10">
            `;

            // Add all fields to wrapper
            formWrapper.appendChild(cardNumberField);
            formWrapper.appendChild(expiryRow);
            formWrapper.appendChild(postalField);

            // Add powered by Square
            const poweredBy = document.createElement("div");
            poweredBy.style.cssText = `
              text-align: center; 
              margin-top: 12px; 
              font-size: 11px; 
              color: #999;
            `;
            poweredBy.textContent = "ðŸ”’ Powered by Square (Demo Mode)";
            formWrapper.appendChild(poweredBy);

            mockElement = formWrapper;
            container.appendChild(mockElement);
            isAttached = true;

            console.log("Mock Square: Successfully attached payment form");
          } catch (error) {
            console.error("Mock Square: Error attaching:", error);
            throw error;
          }
        },

        tokenize: async () => {
          console.log("Mock Square: Tokenizing payment...");

          // Simulate network delay
          await new Promise((resolve) => setTimeout(resolve, 1000));

          const token = `sq_demo_token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

          console.log("Mock Square: Generated token:", token);

          return {
            status: "OK",
            token: token,
          };
        },

        destroy: () => {
          console.log("Mock Square: Destroying card instance...");

          try {
            if (container) {
              // Safely clear container content
              container.innerHTML = "";
              console.log("Mock Square: Cleared container");
            }
          } catch (error) {
            console.warn("Mock Square: Error during cleanup:", error);
          } finally {
            isAttached = false;
            container = null;
            mockElement = null;
            console.log("Mock Square: Cleanup complete");
          }
        },
      };
    },
  };
}
